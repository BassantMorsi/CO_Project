module ALU (A,B,zeroSignal,ALUControl ,ALUResult)
input [3:0] ALUControl; // 3 bits for the control
input [31:0] A,B;
output  [31:0] ALUResult;
reg [31:0] ALUResult;
output zeroSignal;
assign zeroSignal= (ALUResult==0) ? 1 : 0 ; // if A=B the zero signal = 1
always @(ALUctl, A, B) 
begin 
    case (ALUControl)
        0: ALUResult <= #5 A & B;
        1: ALUResult <= #5 A | B;
        2: ALUResult <= #5 A + B; // for add , lw and sw
        6: ALUResult <= #5 A - B;
        7: ALUResult <= #5 A < B ? 1 : 0;
        12: ALUResult <= #5 ~(A | B); 
        default: ALUResult <= #5 0;
    endcase
endmodule

